#!/usr/bin/env bash
################################################################################
# fix-clipboard-widget-configuration.sh
# WHAT: Fixes "Configure clipboard" button failure in KDE Plasma 6
# WHY: KCM clipboard module is missing/broken in Plasma 6, causing config failures
# HOW: Implements alternative configuration methods based on official KDE docs
################################################################################

set -euo pipefail
IFS=$'\n\t'

# ─── CONFIGURATION ────────────────────────────────────────────────────────────
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
LOG_DIR="$HOME/.local/share/kde-memory-guardian"
mkdir -p "$LOG_DIR"
LOG_FILE="$LOG_DIR/clipboard-widget-fix-$(date +%Y%m%d_%H%M%S).log"

# KDE configuration paths
KDE_CONFIG_DIR="$HOME/.config"
PLASMA_CONFIG="$KDE_CONFIG_DIR/plasma-org.kde.plasma.desktop-appletsrc"
KLIPPER_CONFIG="$KDE_CONFIG_DIR/klipperrc"
SYSTEMTRAY_CONFIG="$KDE_CONFIG_DIR/plasma-org.kde.plasma.desktop-appletsrc"

log_message() {
    local level="$1"
    local message="$2"
    local timestamp="$(date '+%Y-%m-%d %H:%M:%S')"
    echo "[$timestamp] [$level] $message" | tee -a "$LOG_FILE"
}

log_message "START" "🔧 Starting clipboard widget configuration fix..."

# ─── ISSUE DIAGNOSIS ──────────────────────────────────────────────────────────
# WHAT: Diagnose the specific clipboard configuration issue
# WHY: Different KDE versions have different clipboard configuration problems
# HOW: Check for missing KCM modules, broken configs, and service issues
diagnose_clipboard_issue() {
    log_message "STEP" "🔍 Diagnosing clipboard configuration issue..."
    
    local issues_found=0
    
    # Check 1: KCM clipboard module availability
    if ! kcmshell6 --list | grep -q clipboard; then
        log_message "ISSUE" "❌ KCM clipboard module missing (common in Plasma 6)"
        ((issues_found++))
    fi
    
    # Check 2: Klipper configuration file
    if [[ ! -f "$KLIPPER_CONFIG" ]]; then
        log_message "ISSUE" "❌ Klipper configuration file missing: $KLIPPER_CONFIG"
        ((issues_found++))
    fi
    
    # Check 3: Plasma systemtray configuration
    if [[ ! -f "$PLASMA_CONFIG" ]]; then
        log_message "ISSUE" "❌ Plasma configuration file missing: $PLASMA_CONFIG"
        ((issues_found++))
    fi
    
    # Check 4: Clipboard widget in systemtray
    local widget_status
    widget_status=$(qdbus org.kde.plasmashell /PlasmaShell org.kde.PlasmaShell.evaluateScript "
    var panels = panels();
    var found = false;
    for (var i = 0; i < panels.length; i++) {
        var widgets = panels[i].widgets();
        for (var j = 0; j < widgets.length; j++) {
            if (widgets[j].type == 'org.kde.plasma.systemtray') {
                widget = widgets[j];
                widget.currentConfigGroup = ['General'];
                var extra = widget.readConfig('extraItems', '');
                if (extra.indexOf('org.kde.plasma.clipboard') !== -1) {
                    found = true;
                }
            }
        }
    }
    print(found ? 'VISIBLE' : 'HIDDEN');
    " 2>/dev/null || echo "ERROR")
    
    if [[ "$widget_status" != "VISIBLE" ]]; then
        log_message "ISSUE" "❌ Clipboard widget not visible in system tray"
        ((issues_found++))
    fi
    
    log_message "INFO" "📊 Found $issues_found clipboard configuration issues"
    return $issues_found
}

# ─── CREATE KLIPPER CONFIGURATION ─────────────────────────────────────────────
# WHAT: Create proper Klipper configuration file with optimal settings
# WHY: Missing or corrupted klipper config causes "Configure clipboard" to fail
# HOW: Generate klipperrc with all necessary settings based on KDE defaults
create_klipper_config() {
    log_message "STEP" "📝 Creating Klipper configuration file..."
    
    # Backup existing config if it exists
    if [[ -f "$KLIPPER_CONFIG" ]]; then
        cp "$KLIPPER_CONFIG" "$KLIPPER_CONFIG.backup.$(date +%Y%m%d_%H%M%S)"
        log_message "INFO" "📋 Backed up existing Klipper config"
    fi
    
    # Create comprehensive Klipper configuration
    cat > "$KLIPPER_CONFIG" << 'EOF'
[General]
# Klipper Configuration - Generated by clipboard widget fix
# Based on KDE Plasma 6 defaults and official documentation

# History settings
KeepClipboardContents=true
MaxClipItems=20
PreventEmptyClipboard=true
IgnoreSelection=false
IgnoreImages=false
SynchronizeClipboardAndSelection=true

# Action settings
ActionsEnabled=true
StripWhiteSpace=true
ReplayActionInHistory=false
NoActionsForWM_CLASS=Navigator,Opera,konqueror,firefox

# Popup settings
PopupAtMousePosition=false
TimeoutForActionPopups=8

# Storage settings
URLGrabberEnabled=true
SaveClipboardContents=true

# Advanced settings
ActionList=
EOF
    
    log_message "OK" "✅ Klipper configuration created: $KLIPPER_CONFIG"
}

# ─── FIX SYSTEMTRAY CLIPBOARD WIDGET ──────────────────────────────────────────
# WHAT: Ensure clipboard widget is properly configured in system tray
# WHY: Widget may be hidden or misconfigured, causing config button to fail
# HOW: Use Plasma scripting API to properly configure systemtray widget
fix_systemtray_widget() {
    log_message "STEP" "🔧 Fixing system tray clipboard widget configuration..."
    
    local fix_result
    fix_result=$(qdbus org.kde.plasmashell /PlasmaShell org.kde.PlasmaShell.evaluateScript "
    var panels = panels();
    var result = 'NO_SYSTEMTRAY';
    
    for (var i = 0; i < panels.length; i++) {
        var widgets = panels[i].widgets();
        for (var j = 0; j < widgets.length; j++) {
            if (widgets[j].type == 'org.kde.plasma.systemtray') {
                widget = widgets[j];
                widget.currentConfigGroup = ['General'];
                
                // Get current configuration
                var extraItems = widget.readConfig('extraItems', '').split(',');
                var hiddenItems = widget.readConfig('hiddenItems', '').split(',');
                var shownItems = widget.readConfig('shownItems', '').split(',');
                
                // Ensure clipboard is in extraItems (visible)
                if (extraItems.indexOf('org.kde.plasma.clipboard') === -1) {
                    extraItems.push('org.kde.plasma.clipboard');
                }
                
                // Remove clipboard from hiddenItems
                var hiddenIndex = hiddenItems.indexOf('org.kde.plasma.clipboard');
                if (hiddenIndex !== -1) {
                    hiddenItems.splice(hiddenIndex, 1);
                }
                
                // Add clipboard to shownItems if not present
                if (shownItems.indexOf('org.kde.plasma.clipboard') === -1) {
                    shownItems.push('org.kde.plasma.clipboard');
                }
                
                // Apply configuration
                widget.writeConfig('extraItems', extraItems.filter(item => item !== '').join(','));
                widget.writeConfig('hiddenItems', hiddenItems.filter(item => item !== '').join(','));
                widget.writeConfig('shownItems', shownItems.filter(item => item !== '').join(','));
                
                result = 'FIXED';
                break;
            }
        }
        if (result === 'FIXED') break;
    }
    
    print(result);
    " 2>&1)
    
    if [[ "$fix_result" == "FIXED" ]]; then
        log_message "OK" "✅ System tray clipboard widget configuration fixed"
        return 0
    else
        log_message "ERROR" "❌ Failed to fix system tray widget: $fix_result"
        return 1
    fi
}

# ─── CREATE ALTERNATIVE CONFIGURATION METHOD ──────────────────────────────────
# WHAT: Create alternative clipboard configuration interface
# WHY: When KCM module is missing, provide direct configuration access
# HOW: Create desktop file and script for manual clipboard configuration
create_alternative_config() {
    log_message "STEP" "🛠️ Creating alternative clipboard configuration method..."
    
    # Create configuration script
    local config_script="$HOME/.local/bin/configure-clipboard"
    cat > "$config_script" << 'EOF'
#!/usr/bin/env bash
# Alternative clipboard configuration script
# Provides direct access to clipboard settings when KCM module fails

KLIPPER_CONFIG="$HOME/.config/klipperrc"

echo "🔧 Clipboard Configuration"
echo "=========================="
echo ""

if [[ ! -f "$KLIPPER_CONFIG" ]]; then
    echo "❌ Klipper configuration not found. Creating default..."
    # Create default config (same as create_klipper_config function)
    mkdir -p "$(dirname "$KLIPPER_CONFIG")"
    cat > "$KLIPPER_CONFIG" << 'EOFCONFIG'
[General]
KeepClipboardContents=true
MaxClipItems=20
PreventEmptyClipboard=true
IgnoreSelection=false
IgnoreImages=false
SynchronizeClipboardAndSelection=true
ActionsEnabled=true
StripWhiteSpace=true
SaveClipboardContents=true
EOFCONFIG
    echo "✅ Default configuration created"
fi

echo "📋 Current clipboard settings:"
echo "=============================="
grep -E "^(MaxClipItems|PreventEmptyClipboard|IgnoreSelection|IgnoreImages)" "$KLIPPER_CONFIG" 2>/dev/null || echo "No settings found"
echo ""

echo "🔧 Available actions:"
echo "1. Edit configuration file directly"
echo "2. Reset to defaults"
echo "3. Show current settings"
echo "4. Restart clipboard service"
echo ""

read -p "Choose action (1-4): " choice

case $choice in
    1)
        ${EDITOR:-nano} "$KLIPPER_CONFIG"
        echo "✅ Configuration edited. Restart KDE session to apply changes."
        ;;
    2)
        cp "$KLIPPER_CONFIG" "$KLIPPER_CONFIG.backup"
        # Recreate default config
        cat > "$KLIPPER_CONFIG" << 'EOFCONFIG'
[General]
KeepClipboardContents=true
MaxClipItems=20
PreventEmptyClipboard=true
IgnoreSelection=false
IgnoreImages=false
SynchronizeClipboardAndSelection=true
ActionsEnabled=true
StripWhiteSpace=true
SaveClipboardContents=true
EOFCONFIG
        echo "✅ Configuration reset to defaults"
        ;;
    3)
        echo "📋 Full configuration:"
        cat "$KLIPPER_CONFIG"
        ;;
    4)
        echo "🔄 Restarting clipboard service..."
        qdbus org.kde.klipper /klipper org.kde.klipper.klipper.quit 2>/dev/null || true
        sleep 2
        klipper &
        echo "✅ Clipboard service restarted"
        ;;
    *)
        echo "❌ Invalid choice"
        ;;
esac
EOF
    
    chmod +x "$config_script"
    log_message "OK" "✅ Alternative configuration script created: $config_script"
    
    # Create desktop file for easy access
    local desktop_file="$HOME/.local/share/applications/configure-clipboard.desktop"
    mkdir -p "$(dirname "$desktop_file")"
    
    cat > "$desktop_file" << EOF
[Desktop Entry]
Type=Application
Name=Configure Clipboard
Comment=Alternative clipboard configuration (fixes broken Configure button)
Exec=$config_script
Icon=edit-copy
Categories=Settings;System;
StartupNotify=true
Keywords=clipboard;klipper;configuration;settings;
EOF
    
    log_message "OK" "✅ Desktop file created: $desktop_file"
}

# ─── RESTART CLIPBOARD SERVICES ───────────────────────────────────────────────
# WHAT: Restart clipboard-related services to apply configuration changes
# WHY: Configuration changes require service restart to take effect
# HOW: Safely restart klipper and plasma shell clipboard components
restart_clipboard_services() {
    log_message "STEP" "🔄 Restarting clipboard services..."
    
    # Stop existing klipper
    qdbus org.kde.klipper /klipper org.kde.klipper.klipper.quit 2>/dev/null || true
    pkill -f klipper 2>/dev/null || true
    sleep 2
    
    # Start klipper
    if command -v klipper >/dev/null; then
        klipper &
        sleep 2
        
        if pgrep -f klipper >/dev/null; then
            log_message "OK" "✅ Klipper restarted successfully"
        else
            log_message "ERROR" "❌ Failed to restart Klipper"
        fi
    else
        log_message "WARN" "⚠️ Klipper command not found"
    fi
    
    # Restart plasmashell to reload widget configuration
    log_message "INFO" "🔄 Restarting Plasma shell to apply widget changes..."
    qdbus org.kde.plasmashell /PlasmaShell org.kde.PlasmaShell.restart 2>/dev/null || {
        log_message "WARN" "⚠️ Could not restart Plasma shell via D-Bus"
        log_message "INFO" "💡 Manual restart recommended: kquitapp6 plasmashell && plasmashell &"
    }
}

# ─── MAIN EXECUTION ───────────────────────────────────────────────────────────
main() {
    log_message "START" "🎯 Starting clipboard widget configuration fix..."
    
    # Step 1: Diagnose issues
    log_message "PHASE" "🔍 Phase 1: Issue Diagnosis"
    if ! diagnose_clipboard_issue; then
        log_message "INFO" "📊 Issues found - proceeding with fixes"
    fi
    
    # Step 2: Create proper Klipper configuration
    log_message "PHASE" "📝 Phase 2: Configuration Creation"
    create_klipper_config
    
    # Step 3: Fix system tray widget
    log_message "PHASE" "🔧 Phase 3: Widget Configuration"
    fix_systemtray_widget
    
    # Step 4: Create alternative configuration method
    log_message "PHASE" "🛠️ Phase 4: Alternative Configuration"
    create_alternative_config
    
    # Step 5: Restart services
    log_message "PHASE" "🔄 Phase 5: Service Restart"
    restart_clipboard_services
    
    log_message "COMPLETE" "🎉 Clipboard widget configuration fix complete!"
    
    echo ""
    echo "🎯 CLIPBOARD WIDGET CONFIGURATION FIX COMPLETE!"
    echo "=============================================="
    echo ""
    echo "✅ FIXES APPLIED:"
    echo "  • Created proper Klipper configuration file"
    echo "  • Fixed system tray widget visibility"
    echo "  • Created alternative configuration method"
    echo "  • Restarted clipboard services"
    echo ""
    echo "🔧 ALTERNATIVE CONFIGURATION ACCESS:"
    echo "  • Command: ~/.local/bin/configure-clipboard"
    echo "  • Desktop: Search for 'Configure Clipboard' in app launcher"
    echo "  • Direct edit: $KLIPPER_CONFIG"
    echo ""
    echo "💡 IF 'CONFIGURE CLIPBOARD' STILL FAILS:"
    echo "  1. Use alternative configuration script above"
    echo "  2. Edit $KLIPPER_CONFIG directly"
    echo "  3. Restart KDE session for full effect"
    echo ""
    echo "📄 Full log: $LOG_FILE"
}

# Execute main function
main "$@"
